## Importing Libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error


## Loading data

data = pd.read_csv('https://raw.githubusercontent.com/AdiPersonalWorks/Random/master/student_scores%20-%20student_scores.csv')
data.head()


## Plotting the distribution

plt.figure(figsize=(8,6))
plt.scatter(data['Hours'], data['Scores'], color='Purple')
plt.title('Hours vs Scores')
plt.xlabel('Hours Studied')
plt.ylabel('Scores')
plt.show()


## Preparing the data

X = data[['Hours']]
y = data['Scores']


## Splitting the data into Training and Testing sets

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)


## Training the model

model = LinearRegression()
model.fit(X_train, y_train)


## Plotting the regression line

plt.figure(figsize=(8,6))
plt.scatter(X_train, y_train, color='purple')
plt.plot(X_train, model.predict(X_train), color='blue')
plt.title('Hours vs Scores (Training set)')
plt.xlabel('Hours Studied')
plt.ylabel('Score')
plt.show()


## Making Predictions

y_pred = model.predict(X_test)


## Comparing Actual vs Predicted

comparison = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
print(comparison)


## Evaluating the Model

mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)

print(f'Mean Absolute Error: {mae}')
print(f'Mean Squared Error: {mse}')
print(f'Root Mean Squared Error: {rmse}')
